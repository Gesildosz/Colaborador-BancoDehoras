"use server"

import { supabase } from "@/lib/supabase"
import type { VehicleFormData } from "@/components/dashboard/add-vehicle-form"
import type { OccurrenceData } from "@/components/dashboard/occurrence-modal"

// --- Vehicle Actions ---

export async function getVehicles(): Promise<VehicleFormData[]> {
  const { data, error } = await supabase.from("vehicles").select("*").order("created_at", { ascending: false })

  if (error) {
    console.error("Error fetching vehicles:", error)
    return []
  }

  return data.map((v) => ({
    ...v,
    scheduledDate: v.scheduled_date ? new Date(v.scheduled_date) : undefined,
  })) as VehicleFormData[]
}

export async function addVehicle(formData: VehicleFormData) {
  const { id, scheduledDate, ...rest } = formData
  const { data, error } = await supabase
    .from("vehicles")
    .insert({
      ...rest,
      scheduled_date: scheduledDate ? scheduledDate.toISOString().split("T")[0] : null, // Format to YYYY-MM-DD
    })
    .select()
    .single()

  if (error) {
    console.error("Error adding vehicle:", error)
    return { success: false, error: error.message }
  }
  return {
    success: true,
    data: { ...data, scheduledDate: data.scheduled_date ? new Date(data.scheduled_date) : undefined },
  }
}

export async function updateVehicle(formData: VehicleFormData) {
  const { id, scheduledDate, ...rest } = formData
  if (!id) return { success: false, error: "Vehicle ID is required for update." }

  const { data, error } = await supabase
    .from("vehicles")
    .update({
      ...rest,
      scheduled_date: scheduledDate ? scheduledDate.toISOString().split("T")[0] : null, // Format to YYYY-MM-DD
    })
    .eq("id", id)
    .select()
    .single()

  if (error) {
    console.error("Error updating vehicle:", error)
    return { success: false, error: error.message }
  }
  return {
    success: true,
    data: { ...data, scheduledDate: data.scheduled_date ? new Date(data.scheduled_date) : undefined },
  }
}

export async function deleteVehicle(id: string) {
  const { error } = await supabase.from("vehicles").delete().eq("id", id)

  if (error) {
    console.error("Error deleting vehicle:", error)
    return { success: false, error: error.message }
  }
  return { success: true }
}

// --- Occurrence Actions ---

export async function getOccurrences(vehicleId?: string): Promise<OccurrenceData[]> {
  let query = supabase.from("occurrences").select("*").order("registered_at", { ascending: false })

  if (vehicleId) {
    query = query.eq("vehicle_id", vehicleId)
  }

  const { data, error } = await query

  if (error) {
    console.error("Error fetching occurrences:", error)
    return []
  }
  return data as OccurrenceData[]
}

export async function addOccurrence(occurrenceData: OccurrenceData) {
  const { id, ...rest } = occurrenceData // ID is generated by DB
  const { data, error } = await supabase
    .from("occurrences")
    .insert({
      ...rest,
      registered_at: new Date().toISOString(),
    })
    .select()
    .single()

  if (error) {
    console.error("Error adding occurrence:", error)
    return { success: false, error: error.message }
  }
  return { success: true, data: data as OccurrenceData }
}
